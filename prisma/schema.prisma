generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String? @unique
  name String @db.VarChar(25)
  createdAt DateTime @default(now())
  about String @db.VarChar(500) @default("")
  posts Post[] @relation("authored")
  comments Comment[]
  pods PodMember[]
  likedPosts Post[] @relation("likedPost")
  likedComments Comment[] @relation("likedComment")
  createdPods Pod[]
  followers Follows[] @relation("following")
  following Follows[] @relation("follower")
}

model Follows {
  follower User @relation("follower", fields: [followerId], references: [id])
  followerId Int
  following User @relation("following", fields: [followingId], references: [id])
  followingId Int
  dateFollowed DateTime @default(now())

  @@id([followerId, followingId])
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content String 
  author User? @relation("authored", fields: [authorId], references: [id]) // Author field is optional to allow posts to be preserved even after user is deleted
  authorId Int?
  comments Comment[]
  likedBy User[] @relation("likedPost")
  pod Pod @relation(fields: [podId], references: [id])
  podId Int
}

model Comment {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content String
  author User? @relation(fields: [authorId], references: [id]) // Author field is optional to allow comments to be preserved even after user is deleted
  authorId Int?
  post Post? @relation(fields: [postId], references: [id]) // Post field is optional to allow comments to be preserved even after post is deleted
  postId Int? 
  likedBy User[] @relation("likedComment")
  parentCommentId Int?
  parentComment Comment? @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies Comment[] @relation("CommentReplies") // Each comment may have 0 or more replies
}

model Pod {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  name String @db.VarChar(25)
  about String @db.VarChar(500)
  members PodMember[]
  createdBy User @relation(fields: [creatorId], references: [id])
  creatorId Int
  posts Post[]
}

// Many-to-many relationship between Users and Pods
model PodMember {
  memberId Int
  member User @relation(fields: [memberId], references: [id])
  podId Int
  pod Pod @relation(fields: [podId], references: [id])
  dateJoined DateTime @default(now())
  @@id([memberId, podId])
}